#!/usr/bin/env ruby

require 'optparse'

class Deploy

  def initialize(args)
    @options = {
      :environment     => 'staging',
      :security_groups => 'staging',
      :version         => nil,
    }

    option_parser = OptionParser.new do |opts|
      opts.on('-e', '--environment [ENVIRONMENT]') do |environment|
        if environment == 'production'
          @options[:environment]     = 'production'
          @options[:security_groups] = 'production'
        elsif environment != 'staging'
          print_usage_and_exit
        end
      end

      opts.on('-v', '--version [VERSION]') do |version|
        @options[:version] = version
      end

      opts.on_tail('-h', '--help') do
        print_usage_and_exit
      end
    end

    unless option_parser.parse!(args).empty?
      puts "Unknown options given."
      print_usage_and_exit
    end

    if !@options[:version].nil? && @options[:version] !~ /^[0-9]{14}$/
      puts "Invalid version, must be a timestamp in the format yyyymmddhhmmss"
      print_usage_and_exit
    end
    @options[:version] = 'master' if @options[:version].nil? && @options[:environment] == 'staging'
  end

  def deploy
    puts "#{@options[:environment].upcase} deploy"
    update_working_copy
    create_deploy_tag if @options[:version].nil?
    push_version_upstream
    execute_cloudrun
    puts "Done deploying: #{Time.now}"
  end

  private

  def create_deploy_tag
    @options[:version] = Time.now.utc.strftime("%Y%m%d%H%M%S")
    prompt_and_exit_if_not_yes
    upload_assets
    puts "Creating new deploy tag."
    system("git tag -a -m 'Creating deploy tag #{@options[:version]}' #{@options[:version]}")
    system("git push --tags upstream master")
  end

  def print_usage_and_exit
    puts "USAGE: script/deploy [options]"
    puts "    -e, --environment (optional): The environment to deploy to. Can be 'staging' or 'production'. Default is 'staging'."
    puts "    -v, --version (optional): The version to deploy. Defaults to 'master' for staging deploys, creates a new tag for production deploys."
    exit
  end

  def prompt_and_exit_if_not_yes
    print "No deploy tag specified. Create new deploy tag #{@options[:version]}? [y/N] "
    answer = STDIN.gets
    if answer !~ /^(y|yes)$/i
      exit 1
    end
  end

  def push_version_upstream
    puts "Force pushing #{@options[:version]} to upstream:#{@options[:environment]}."
    system("git push --force upstream #{@options[:version]}~0:#{@options[:environment]}")
  end

  def update_working_copy
    puts "Updating working copy."
    git_status = `git status`
    if git_status !~ /On branch master/
      puts "You must be on the master branch!"
      exit 1
    end
    if git_status !~ /working directory clean/
      puts "You must have a clean working directory!"
      exit 1
    end
    system("git pull --tags upstream master")
  end

  def upload_assets
    puts "Compiling and uploading assets to S3."
    system("bundle exec rake assets:upload")
    if `git status` =~ /manifest.yml/
      system("git add config/manifest.yml")
      system("git commit -m 'Update assets manifest.'")
    end
  end

  def execute_cloudrun
    command = "script/cloud run '#{@options[:security_groups]}' '/home/ubuntu/passmaster/script/wrapper /home/ubuntu/passmaster/script/server_deploy #{@options[:environment]}' 'ubuntu'"
    system(command)
  end

end

Deploy.new(ARGV).deploy
