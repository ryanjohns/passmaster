#!/usr/bin/env ruby

require 'aws-sdk'
require 'resolv'

class Cloud

  REGIONS = [ 'us-west-2' ]

  def initialize(args)
    @command         = args.shift
    @security_groups = args.shift.to_s.split
    @args            = args
  end

  def exec
    case @command
    when 'r', 'run'
      run
    when 'l', 'login'
      login
    when 'h', 'help'
      print_help
    else
      print_usage
    end
  end

  private

  def run
    command = @args.shift
    user    = @args.shift || 'ubuntu'
    serial  = (@args.shift || 'false') != 'false'
    set_regions(@args.shift)
    if command.nil?
      print_run_help
      return
    end
    print_instances
    puts "\nUser: #{user}"
    puts "Command: #{command}"
    puts "Serial: #{serial != false}"
    print "\nRun command? [y/N] "
    answer = STDIN.gets
    return unless answer =~ /^(y|yes)$/i
    total = instances.size
    add_to_known_hosts
    threads = []
    instances.each_with_index do |instance, index|
      thread = Thread.new do
        puts "Running on #{instance[:dns_name]} (#{instance[:id]}, #{instance[:region]}) [#{instance[:sec_groups]}] (#{index + 1} / #{total})",
             `ssh #{user}@#{instance[:dns_name]} '#{command}' 2>&1`,
             "\n"
      end
      serial ? thread.join : threads.push(thread)
    end
    threads.each(&:join)
  end

  def login
    number = @args.shift.to_i
    user   = @args.shift || 'ubuntu'
    set_regions(@args.shift)
    print_instances
    instance = instances[number]
    if instance.nil?
      puts "\nInvalid instance number"
      return
    end
    puts "\nConnecting to instance #{instance[:dns_name]} (#{instance[:id]}, #{instance[:region]}) as #{user}"
    system "ssh #{user}@#{instance[:dns_name]}"
  end

  def instances
    return @instances unless @instances.nil?
    @instances = []
    credential_file = File.expand_path('../../.aws_credentials.sh', __FILE__)
    credential_file = ENV['AWS_CREDENTIAL_FILE'] || credential_file unless File.exists?(credential_file)
    unless File.exists?(credential_file)
      puts "Could not find AWS credentials. Make sure they are in #{File.expand_path('../../.aws_credentials.sh', __FILE__)} or the file specified by the AWS_CREDENTIAL_FILE environment variable."
      return
    end
    aws_credentials   = File.read(credential_file)
    access_key_id     = aws_credentials.scan(/AWSAccessKeyId=.+/).first.sub('AWSAccessKeyId=', '')
    secret_access_key = aws_credentials.scan(/AWSSecretKey=.+/).first.sub('AWSSecretKey=', '')
    AWS.config(:access_key_id => access_key_id, :secret_access_key => secret_access_key)
    ec2 = AWS::EC2.new
    @regions.each do |r|
      region_instances = []
      region = ec2.regions[r]
      region.instances.each do |instance|
        next unless instance.status == :running
        sec_groups = instance.security_groups.map(&:name)
        if sec_groups.any? { |sg| @security_groups.include?(sg) }
          details = {
            :id          => instance.id,
            :dns_name    => instance.dns_name,
            :sec_groups  => sec_groups.sort.join(', '),
            :launch_time => instance.launch_time,
            :region      => r,
          }
          region_instances << details
        end
      end
      region_instances.sort! do |a, b|
        [ a[:sec_groups], -b[:launch_time].to_i ] <=> [ b[:sec_groups], -a[:launch_time].to_i ]
      end
      @instances += region_instances
    end
    @instances
  end

  def set_regions(arg)
    if arg.nil?
      @regions = REGIONS
    else
      @regions = []
      arg.split.each do |r|
        if REGIONS.include?(r)
          @regions << r
        else
          puts "Ignoring invalid region: #{r}"
        end
      end
    end
  end

  def add_to_known_hosts
    f = open(File.expand_path('~/.ssh/known_hosts'), 'r')
    file_content = ''
    f.each do |line|
      file_content += line.split[0]
    end
    f = open(File.expand_path('~/.ssh/known_hosts'), 'a')
    instances.each do |instance|
      unless file_content.include?(instance[:dns_name])
        ip = Resolv.getaddress(instance[:dns_name])
        puts "Adding #{instance[:dns_name]} to known_hosts"
        f.puts "#{instance[:dns_name]},#{ip} ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1DGxzGsozcEG1Ws+vmw8QTJpWumSmluf3UJMPczPqB1IZt3MCYbOPFQDdTOa0FUVNLE0UAi/jJS5vlDe5KfAE6zNZk2+6IHfopvwwV21BFk39Bu+cxZSYEBRUstpu7N8/F3S+tCnQ3KBWkQSClGxBf4qdsZP4shGjqe6hIU1EHtwm4than661BJb8K7zjmZcT8Vq1zdX7Ylgbi0KwuDTctGXgX4rbCWd5zuwUEzKSIOfd4k4Fe1Fxwo9uB6AU0jjl1sYrhmwciW9kHRxxBEulRuOq1b0tjg6sBXQ2dmrdVi7sPoq6Xj7vJfjmpSqa+n/FKsygFG7EuV5CVVcuJCdL"
      end
    end
    f.close
  end

  def print_instances
    puts "Matching instances: [#{@regions.join(', ')}]"
    instances.each_with_index do |instance, index|
      puts "  #{index}. #{instance[:dns_name]} (#{instance[:id]}, #{instance[:region]}) [#{instance[:sec_groups]}]"
    end
  end

  def print_help
    case @security_groups.join
    when 'r', 'run'
      print_run_help
    when 'l', 'login'
      print_login_help
    else
      print_usage
    end
  end

  def print_usage
    puts 'USAGE: script/cloud command security_groups [options]'
    puts ''
    puts '    commands:        (l)ogin, (r)un, (h)elp'
    puts '    security_groups: a space-separated list of AWS security groups'
    puts ''
  end

  def print_run_help
    puts 'USAGE: script/cloud run security_groups command [user, [serial, [regions]]]'
    puts ''
    puts '    security_groups: a space-separated list of AWS security groups'
    puts '    command:         the command to run on all matching instances'
    puts "    user:            the name of the user to run the command as, defaults to 'ubuntu'"
    puts "    serial:          set to true to run on one instance at a time, defaults to false"
    puts "    regions:         a space-separated list of AWS regions, defaults to all regions"
    puts ''
  end

  def print_login_help
    puts 'USAGE: script/cloud login security_groups [instance_number, [user, [regions]]]'
    puts ''
    puts '    security_groups: a space-separated list of AWS security groups'
    puts '    instance_number: the instance number to login to, defaults to 0'
    puts "    user:            the name of the user to log in as, defaults to 'ubuntu'"
    puts "    regions:         a space-separated list of AWS regions, defaults to all regions"
    puts ''
  end

end

Cloud.new(ARGV).exec
